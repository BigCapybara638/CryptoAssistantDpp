package com.example.cryptoassistant.ui.home

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.cryptoassistant.api.crypronews.CryptoNewsItem
import com.example.cryptoassistant.api.crypronews.CryptoNewsRepository
import com.example.cryptoassistant.api.cryptoprice.CryptoItem
import com.example.cryptoassistant.api.cryptoprice.CryptoRepository
import com.example.cryptoassistant.api.cryptoprice.GlobalStats
import kotlinx.coroutines.async
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class HomeViewModel : ViewModel() {

    private val cryptoRepository = CryptoRepository()
    private val newsRepository = CryptoNewsRepository()

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    private val _cryptosState = MutableStateFlow<DataState<List<CryptoItem>>>(DataState.Loading)
    val cryptosState: StateFlow<DataState<List<CryptoItem>>> = _cryptosState

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    private val _globalStatsState = MutableStateFlow<DataState<GlobalStats>>(DataState.Loading)
    val globalStatsState: StateFlow<DataState<GlobalStats>> = _globalStatsState

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
    private val _newsState = MutableStateFlow<DataState<List<CryptoNewsItem>>>(DataState.Loading)
    val newsState: StateFlow<DataState<List<CryptoNewsItem>>> = _newsState

    // –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading

    private val _news = MutableStateFlow<List<CryptoNewsItem>>(emptyList())
    val news: StateFlow<List<CryptoNewsItem>> = _news

    // –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
    private val _error = MutableStateFlow<String?>(null)
    val error: StateFlow<String?> = _error

    // –§–ª–∞–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    private val _isRefreshing = MutableStateFlow(false)
    val isRefreshing: StateFlow<Boolean> = _isRefreshing

    init {
        loadAllData()
    }

    fun loadAllData() {
        viewModelScope.launch {
            _isLoading.value = true
            _error.value = null

            try {
                // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
                val cryptosDeferred = async {
                    loadCryptos()
                }
                val statsDeferred = async {
                    loadGlobalStats()
                }
                val newsDeferred = async {
                    loadNews()
                }

                // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∑–æ–∫
                cryptosDeferred.await()
                statsDeferred.await()
                newsDeferred.await()

                println("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

            } catch (e: Exception) {
                _error.value = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${e.message}"
                println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${e.message}")
            } finally {
                _isLoading.value = false
            }
        }
    }

    fun refreshData() {
        viewModelScope.launch {
            _isRefreshing.value = true
            _error.value = null

            try {
                // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
                val cryptosDeferred = async { loadCryptos() }
                val statsDeferred = async { loadGlobalStats() }
                val newsDeferred = async { loadNews() }

                cryptosDeferred.await()
                statsDeferred.await()
                newsDeferred.await()

                println("üîÑ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

            } catch (e: Exception) {
                _error.value = "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${e.message}"
                println("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${e.message}")
            } finally {
                _isRefreshing.value = false
            }
        }
    }

    private suspend fun loadCryptos() {
        try {
            _cryptosState.value = DataState.Loading
            val cryptos = cryptoRepository.getTopCryptos(20)
            _cryptosState.value = DataState.Success(cryptos)
            println("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${cryptos.size} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
        } catch (e: Exception) {
            _cryptosState.value = DataState.Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: ${e.message}")
            println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: ${e.message}")
        }
    }

    private suspend fun loadGlobalStats() {
        try {
            _globalStatsState.value = DataState.Loading
        } catch (e: Exception) {
            _globalStatsState.value = DataState.Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${e.message}")
            println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${e.message}")
        }
    }

    private suspend fun loadNews() {
        try {
            _newsState.value = DataState.Loading
            val news = newsRepository.getCryptoNews(10)
            _newsState.value = DataState.Success(news)
            println("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${news.size} –Ω–æ–≤–æ—Å—Ç–µ–π")
        } catch (e: Exception) {
            _newsState.value = DataState.Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: ${e.message}")
            println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: ${e.message}")
        }
    }

    // –û—Ç–¥–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    fun loadCryptosOnly() {
        viewModelScope.launch {
            loadCryptos()
        }
    }

    fun loadNewsOnly() {
        viewModelScope.launch {
            loadNews()
        }
    }

    fun loadStatsOnly() {
        viewModelScope.launch {
            loadGlobalStats()
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫
    fun clearError() {
        _error.value = null
    }

    // Retry –º–µ—Ö–∞–Ω–∏–∑–º
    fun retry() {
        loadAllData()
    }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
sealed class DataState<out T> {
    object Loading : DataState<Nothing>()
    data class Success<T>(val data: T) : DataState<T>()
    data class Error(val message: String) : DataState<Nothing>()
}